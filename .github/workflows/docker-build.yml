name: Build and Push Container Images

on:
  push:
    branches: [ main, master ]
    paths:
      - 'load/**'
      - 'transform/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'load/**' 
      - 'transform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1

jobs:
  build-lido:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push Lido image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cardano-insights-lido-ingestion-${{ github.event.inputs.environment || 'dev' }}-lido
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build -f load/lido/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-dbt:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push dbt image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cardano-insights-lido-ingestion-${{ github.event.inputs.environment || 'dev' }}-dbt
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build -f transform/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  update-task-definitions:
    runs-on: ubuntu-latest
    needs: [build-lido, build-dbt]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update ECS task definitions
      env:
        ENVIRONMENT: ${{ matrix.environment }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update Lido task definition
        aws ecs update-service \
          --cluster cardano-insights-lido-ingestion-${ENVIRONMENT}-cluster \
          --service cardano-insights-lido-ingestion-${ENVIRONMENT}-lido \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        # Update dbt task definition  
        aws ecs update-service \
          --cluster cardano-insights-lido-ingestion-${ENVIRONMENT}-cluster \
          --service cardano-insights-lido-ingestion-${ENVIRONMENT}-dbt \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}