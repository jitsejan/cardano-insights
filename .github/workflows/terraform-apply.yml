name: Terraform Infrastructure

on:
  push:
    branches: [ main, master ]
    paths:
      - 'infra/**'
  pull_request:
    branches: [ main, master ]  
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write  # For PR comments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5
    
    - name: Terraform Init
      working-directory: ./infra
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=cardano-insights/${{ env.TF_VAR_environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
    
    - name: Terraform Validate
      working-directory: ./infra
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./infra
      env:
        TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
        TF_VAR_private_subnet_ids: ${{ secrets.PRIVATE_SUBNET_IDS }}
      run: |
        terraform plan \
          -var-file="env/${{ env.TF_VAR_environment }}.tfvars" \
          -out=tfplan
    
    - name: Terraform Apply
      working-directory: ./infra
      if: github.event.inputs.action == 'apply' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      env:
        TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
        TF_VAR_private_subnet_ids: ${{ secrets.PRIVATE_SUBNET_IDS }}
      run: |
        if [ "${{ github.event.inputs.action }}" = "apply" ] || [ "${{ github.event_name }}" = "push" ]; then
          terraform apply -auto-approve tfplan
        fi
    
    - name: Terraform Destroy
      working-directory: ./infra
      if: github.event.inputs.action == 'destroy'
      env:
        TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
        TF_VAR_private_subnet_ids: ${{ secrets.PRIVATE_SUBNET_IDS }}
      run: |
        terraform destroy \
          -var-file="env/${{ env.TF_VAR_environment }}.tfvars" \
          -auto-approve